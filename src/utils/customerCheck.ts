import { supabase } from '../lib/supabase';

export interface CustomerData {
  customer_name: string;
  customer_email: string;
  customer_phone: string;
}

/**
 * Verifica se um cliente j√° existe na tabela tickets pelo n√∫mero de telefone
 * 
 * ‚úÖ CORRE√á√ÉO APLICADA: N√ÉO normaliza phoneNumber
 * O n√∫mero J√Å CHEGA NORMALIZADO dos componentes de UI (ReservationStep1Modal)
 * Formato esperado: +5562999999999
 * 
 * A fun√ß√£o RPC 'get_tickets_by_phone' do banco de dados j√° faz a normaliza√ß√£o
 * interna para compara√ß√£o, ent√£o n√£o √© necess√°rio normalizar aqui.
 * 
 * @param phoneNumber - N√∫mero de telefone J√Å NORMALIZADO (formato: +5562999999999)
 * @returns Dados do cliente se encontrado, null caso contr√°rio
 */
export async function checkCustomerByPhone(
  phoneNumber: string
): Promise<{ data: CustomerData | null; error: any }> {
  try {
    // ‚úÖ CORRE√á√ÉO: N√ÉO normaliza - usa exatamente como recebido
    console.log('üîµ customerCheck.checkCustomerByPhone - Input phone (NO normalization):', phoneNumber);
    
    // Usa a fun√ß√£o do banco que normaliza n√∫meros de telefone internamente
    const { data, error } = await supabase
      .rpc('get_tickets_by_phone', { 
        p_phone_number: phoneNumber // ‚úÖ Usa diretamente, SEM normalizar
      });

    if (error) {
      console.error('‚ùå customerCheck - Error checking customer by phone:', error);
      return { data: null, error };
    }

    console.log(`üü¢ customerCheck - Found ${data?.length || 0} tickets for phone:`, phoneNumber);

    // Retorna o primeiro resultado (mais recente)
    if (data && data.length > 0) {
      const firstTicket = data[0];
      
      const customerData: CustomerData = {
        customer_name: firstTicket.customer_name,
        customer_email: firstTicket.customer_email,
        customer_phone: firstTicket.customer_phone
      };

      console.log('‚úÖ customerCheck - Customer found:', {
        name: customerData.customer_name,
        email: customerData.customer_email,
        phone: customerData.customer_phone
      });

      return {
        data: customerData,
        error: null
      };
    }

    console.log('‚ÑπÔ∏è customerCheck - No customer found for this phone');
    return { data: null, error: null };
  } catch (error) {
    console.error('‚ùå customerCheck - Unexpected error:', error);
    return { data: null, error };
  }
}